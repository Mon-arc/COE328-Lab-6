// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2024 06:49:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Circuit2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Circuit2_vlg_sample_tst(
	A,
	A_Reset,
	B,
	B_Reset,
	Clock,
	data_inFSM,
	Enable_Decoder,
	ResetFSM,
	sampler_tx
);
input [7:0] A;
input  A_Reset;
input [7:0] B;
input  B_Reset;
input  Clock;
input  data_inFSM;
input  Enable_Decoder;
input  ResetFSM;
output sampler_tx;

reg sample;
time current_time;
always @(A or A_Reset or B or B_Reset or Clock or data_inFSM or Enable_Decoder or ResetFSM)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Circuit2_vlg_check_tst (
	R_First_Four_Display,
	R_Last_Four_Display,
	R_Last_Four_Negative,
	StudentID_Display,
	sampler_rx
);
input [0:6] R_First_Four_Display;
input [0:6] R_Last_Four_Display;
input [0:6] R_Last_Four_Negative;
input [0:6] StudentID_Display;
input sampler_rx;

reg [0:6] R_First_Four_Display_expected;
reg [0:6] R_Last_Four_Display_expected;
reg [0:6] R_Last_Four_Negative_expected;
reg [0:6] StudentID_Display_expected;

reg [0:6] R_First_Four_Display_prev;
reg [0:6] R_Last_Four_Display_prev;
reg [0:6] R_Last_Four_Negative_prev;
reg [0:6] StudentID_Display_prev;

reg [0:6] R_First_Four_Display_expected_prev;
reg [0:6] R_Last_Four_Display_expected_prev;
reg [0:6] R_Last_Four_Negative_expected_prev;
reg [0:6] StudentID_Display_expected_prev;

reg [0:6] last_R_First_Four_Display_exp;
reg [0:6] last_R_Last_Four_Display_exp;
reg [0:6] last_R_Last_Four_Negative_exp;
reg [0:6] last_StudentID_Display_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	R_First_Four_Display_prev = R_First_Four_Display;
	R_Last_Four_Display_prev = R_Last_Four_Display;
	R_Last_Four_Negative_prev = R_Last_Four_Negative;
	StudentID_Display_prev = StudentID_Display;
end

// update expected /o prevs

always @(trigger)
begin
	R_First_Four_Display_expected_prev = R_First_Four_Display_expected;
	R_Last_Four_Display_expected_prev = R_Last_Four_Display_expected;
	R_Last_Four_Negative_expected_prev = R_Last_Four_Negative_expected;
	StudentID_Display_expected_prev = StudentID_Display_expected;
end


// expected R_First_Four_Display[ 6 ]
initial
begin
	R_First_Four_Display_expected[6] = 1'bX;
end 
// expected R_First_Four_Display[ 5 ]
initial
begin
	R_First_Four_Display_expected[5] = 1'bX;
end 
// expected R_First_Four_Display[ 4 ]
initial
begin
	R_First_Four_Display_expected[4] = 1'bX;
end 
// expected R_First_Four_Display[ 3 ]
initial
begin
	R_First_Four_Display_expected[3] = 1'bX;
end 
// expected R_First_Four_Display[ 2 ]
initial
begin
	R_First_Four_Display_expected[2] = 1'bX;
end 
// expected R_First_Four_Display[ 1 ]
initial
begin
	R_First_Four_Display_expected[1] = 1'bX;
end 
// expected R_First_Four_Display[ 0 ]
initial
begin
	R_First_Four_Display_expected[0] = 1'bX;
end 
// expected R_Last_Four_Display[ 6 ]
initial
begin
	R_Last_Four_Display_expected[6] = 1'bX;
end 
// expected R_Last_Four_Display[ 5 ]
initial
begin
	R_Last_Four_Display_expected[5] = 1'bX;
end 
// expected R_Last_Four_Display[ 4 ]
initial
begin
	R_Last_Four_Display_expected[4] = 1'bX;
end 
// expected R_Last_Four_Display[ 3 ]
initial
begin
	R_Last_Four_Display_expected[3] = 1'bX;
end 
// expected R_Last_Four_Display[ 2 ]
initial
begin
	R_Last_Four_Display_expected[2] = 1'bX;
end 
// expected R_Last_Four_Display[ 1 ]
initial
begin
	R_Last_Four_Display_expected[1] = 1'bX;
end 
// expected R_Last_Four_Display[ 0 ]
initial
begin
	R_Last_Four_Display_expected[0] = 1'bX;
end 
// expected R_Last_Four_Negative[ 6 ]
initial
begin
	R_Last_Four_Negative_expected[6] = 1'bX;
end 
// expected R_Last_Four_Negative[ 5 ]
initial
begin
	R_Last_Four_Negative_expected[5] = 1'bX;
end 
// expected R_Last_Four_Negative[ 4 ]
initial
begin
	R_Last_Four_Negative_expected[4] = 1'bX;
end 
// expected R_Last_Four_Negative[ 3 ]
initial
begin
	R_Last_Four_Negative_expected[3] = 1'bX;
end 
// expected R_Last_Four_Negative[ 2 ]
initial
begin
	R_Last_Four_Negative_expected[2] = 1'bX;
end 
// expected R_Last_Four_Negative[ 1 ]
initial
begin
	R_Last_Four_Negative_expected[1] = 1'bX;
end 
// expected R_Last_Four_Negative[ 0 ]
initial
begin
	R_Last_Four_Negative_expected[0] = 1'bX;
end 
// expected StudentID_Display[ 6 ]
initial
begin
	StudentID_Display_expected[6] = 1'bX;
end 
// expected StudentID_Display[ 5 ]
initial
begin
	StudentID_Display_expected[5] = 1'bX;
end 
// expected StudentID_Display[ 4 ]
initial
begin
	StudentID_Display_expected[4] = 1'bX;
end 
// expected StudentID_Display[ 3 ]
initial
begin
	StudentID_Display_expected[3] = 1'bX;
end 
// expected StudentID_Display[ 2 ]
initial
begin
	StudentID_Display_expected[2] = 1'bX;
end 
// expected StudentID_Display[ 1 ]
initial
begin
	StudentID_Display_expected[1] = 1'bX;
end 
// expected StudentID_Display[ 0 ]
initial
begin
	StudentID_Display_expected[0] = 1'bX;
end 
// generate trigger
always @(R_First_Four_Display_expected or R_First_Four_Display or R_Last_Four_Display_expected or R_Last_Four_Display or R_Last_Four_Negative_expected or R_Last_Four_Negative or StudentID_Display_expected or StudentID_Display)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected R_First_Four_Display = %b | expected R_Last_Four_Display = %b | expected R_Last_Four_Negative = %b | expected StudentID_Display = %b | ",R_First_Four_Display_expected_prev,R_Last_Four_Display_expected_prev,R_Last_Four_Negative_expected_prev,StudentID_Display_expected_prev);
	$display("| real R_First_Four_Display = %b | real R_Last_Four_Display = %b | real R_Last_Four_Negative = %b | real StudentID_Display = %b | ",R_First_Four_Display_prev,R_Last_Four_Display_prev,R_Last_Four_Negative_prev,StudentID_Display_prev);
`endif
	if (
		( R_First_Four_Display_expected_prev[0] !== 1'bx ) && ( R_First_Four_Display_prev[0] !== R_First_Four_Display_expected_prev[0] )
		&& ((R_First_Four_Display_expected_prev[0] !== last_R_First_Four_Display_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_First_Four_Display[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_First_Four_Display_expected_prev);
		$display ("     Real value = %b", R_First_Four_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_First_Four_Display_exp[0] = R_First_Four_Display_expected_prev[0];
	end
	if (
		( R_First_Four_Display_expected_prev[1] !== 1'bx ) && ( R_First_Four_Display_prev[1] !== R_First_Four_Display_expected_prev[1] )
		&& ((R_First_Four_Display_expected_prev[1] !== last_R_First_Four_Display_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_First_Four_Display[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_First_Four_Display_expected_prev);
		$display ("     Real value = %b", R_First_Four_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_First_Four_Display_exp[1] = R_First_Four_Display_expected_prev[1];
	end
	if (
		( R_First_Four_Display_expected_prev[2] !== 1'bx ) && ( R_First_Four_Display_prev[2] !== R_First_Four_Display_expected_prev[2] )
		&& ((R_First_Four_Display_expected_prev[2] !== last_R_First_Four_Display_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_First_Four_Display[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_First_Four_Display_expected_prev);
		$display ("     Real value = %b", R_First_Four_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_First_Four_Display_exp[2] = R_First_Four_Display_expected_prev[2];
	end
	if (
		( R_First_Four_Display_expected_prev[3] !== 1'bx ) && ( R_First_Four_Display_prev[3] !== R_First_Four_Display_expected_prev[3] )
		&& ((R_First_Four_Display_expected_prev[3] !== last_R_First_Four_Display_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_First_Four_Display[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_First_Four_Display_expected_prev);
		$display ("     Real value = %b", R_First_Four_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_First_Four_Display_exp[3] = R_First_Four_Display_expected_prev[3];
	end
	if (
		( R_First_Four_Display_expected_prev[4] !== 1'bx ) && ( R_First_Four_Display_prev[4] !== R_First_Four_Display_expected_prev[4] )
		&& ((R_First_Four_Display_expected_prev[4] !== last_R_First_Four_Display_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_First_Four_Display[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_First_Four_Display_expected_prev);
		$display ("     Real value = %b", R_First_Four_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_First_Four_Display_exp[4] = R_First_Four_Display_expected_prev[4];
	end
	if (
		( R_First_Four_Display_expected_prev[5] !== 1'bx ) && ( R_First_Four_Display_prev[5] !== R_First_Four_Display_expected_prev[5] )
		&& ((R_First_Four_Display_expected_prev[5] !== last_R_First_Four_Display_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_First_Four_Display[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_First_Four_Display_expected_prev);
		$display ("     Real value = %b", R_First_Four_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_First_Four_Display_exp[5] = R_First_Four_Display_expected_prev[5];
	end
	if (
		( R_First_Four_Display_expected_prev[6] !== 1'bx ) && ( R_First_Four_Display_prev[6] !== R_First_Four_Display_expected_prev[6] )
		&& ((R_First_Four_Display_expected_prev[6] !== last_R_First_Four_Display_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_First_Four_Display[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_First_Four_Display_expected_prev);
		$display ("     Real value = %b", R_First_Four_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_First_Four_Display_exp[6] = R_First_Four_Display_expected_prev[6];
	end
	if (
		( R_Last_Four_Display_expected_prev[0] !== 1'bx ) && ( R_Last_Four_Display_prev[0] !== R_Last_Four_Display_expected_prev[0] )
		&& ((R_Last_Four_Display_expected_prev[0] !== last_R_Last_Four_Display_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four_Display[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_Display_expected_prev);
		$display ("     Real value = %b", R_Last_Four_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_Last_Four_Display_exp[0] = R_Last_Four_Display_expected_prev[0];
	end
	if (
		( R_Last_Four_Display_expected_prev[1] !== 1'bx ) && ( R_Last_Four_Display_prev[1] !== R_Last_Four_Display_expected_prev[1] )
		&& ((R_Last_Four_Display_expected_prev[1] !== last_R_Last_Four_Display_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four_Display[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_Display_expected_prev);
		$display ("     Real value = %b", R_Last_Four_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_Last_Four_Display_exp[1] = R_Last_Four_Display_expected_prev[1];
	end
	if (
		( R_Last_Four_Display_expected_prev[2] !== 1'bx ) && ( R_Last_Four_Display_prev[2] !== R_Last_Four_Display_expected_prev[2] )
		&& ((R_Last_Four_Display_expected_prev[2] !== last_R_Last_Four_Display_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four_Display[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_Display_expected_prev);
		$display ("     Real value = %b", R_Last_Four_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_Last_Four_Display_exp[2] = R_Last_Four_Display_expected_prev[2];
	end
	if (
		( R_Last_Four_Display_expected_prev[3] !== 1'bx ) && ( R_Last_Four_Display_prev[3] !== R_Last_Four_Display_expected_prev[3] )
		&& ((R_Last_Four_Display_expected_prev[3] !== last_R_Last_Four_Display_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four_Display[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_Display_expected_prev);
		$display ("     Real value = %b", R_Last_Four_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_Last_Four_Display_exp[3] = R_Last_Four_Display_expected_prev[3];
	end
	if (
		( R_Last_Four_Display_expected_prev[4] !== 1'bx ) && ( R_Last_Four_Display_prev[4] !== R_Last_Four_Display_expected_prev[4] )
		&& ((R_Last_Four_Display_expected_prev[4] !== last_R_Last_Four_Display_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four_Display[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_Display_expected_prev);
		$display ("     Real value = %b", R_Last_Four_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_Last_Four_Display_exp[4] = R_Last_Four_Display_expected_prev[4];
	end
	if (
		( R_Last_Four_Display_expected_prev[5] !== 1'bx ) && ( R_Last_Four_Display_prev[5] !== R_Last_Four_Display_expected_prev[5] )
		&& ((R_Last_Four_Display_expected_prev[5] !== last_R_Last_Four_Display_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four_Display[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_Display_expected_prev);
		$display ("     Real value = %b", R_Last_Four_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_Last_Four_Display_exp[5] = R_Last_Four_Display_expected_prev[5];
	end
	if (
		( R_Last_Four_Display_expected_prev[6] !== 1'bx ) && ( R_Last_Four_Display_prev[6] !== R_Last_Four_Display_expected_prev[6] )
		&& ((R_Last_Four_Display_expected_prev[6] !== last_R_Last_Four_Display_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four_Display[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_Display_expected_prev);
		$display ("     Real value = %b", R_Last_Four_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R_Last_Four_Display_exp[6] = R_Last_Four_Display_expected_prev[6];
	end
	if (
		( R_Last_Four_Negative_expected_prev[0] !== 1'bx ) && ( R_Last_Four_Negative_prev[0] !== R_Last_Four_Negative_expected_prev[0] )
		&& ((R_Last_Four_Negative_expected_prev[0] !== last_R_Last_Four_Negative_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four_Negative[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_Negative_expected_prev);
		$display ("     Real value = %b", R_Last_Four_Negative_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_Last_Four_Negative_exp[0] = R_Last_Four_Negative_expected_prev[0];
	end
	if (
		( R_Last_Four_Negative_expected_prev[1] !== 1'bx ) && ( R_Last_Four_Negative_prev[1] !== R_Last_Four_Negative_expected_prev[1] )
		&& ((R_Last_Four_Negative_expected_prev[1] !== last_R_Last_Four_Negative_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four_Negative[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_Negative_expected_prev);
		$display ("     Real value = %b", R_Last_Four_Negative_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_Last_Four_Negative_exp[1] = R_Last_Four_Negative_expected_prev[1];
	end
	if (
		( R_Last_Four_Negative_expected_prev[2] !== 1'bx ) && ( R_Last_Four_Negative_prev[2] !== R_Last_Four_Negative_expected_prev[2] )
		&& ((R_Last_Four_Negative_expected_prev[2] !== last_R_Last_Four_Negative_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four_Negative[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_Negative_expected_prev);
		$display ("     Real value = %b", R_Last_Four_Negative_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_Last_Four_Negative_exp[2] = R_Last_Four_Negative_expected_prev[2];
	end
	if (
		( R_Last_Four_Negative_expected_prev[3] !== 1'bx ) && ( R_Last_Four_Negative_prev[3] !== R_Last_Four_Negative_expected_prev[3] )
		&& ((R_Last_Four_Negative_expected_prev[3] !== last_R_Last_Four_Negative_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four_Negative[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_Negative_expected_prev);
		$display ("     Real value = %b", R_Last_Four_Negative_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_Last_Four_Negative_exp[3] = R_Last_Four_Negative_expected_prev[3];
	end
	if (
		( R_Last_Four_Negative_expected_prev[4] !== 1'bx ) && ( R_Last_Four_Negative_prev[4] !== R_Last_Four_Negative_expected_prev[4] )
		&& ((R_Last_Four_Negative_expected_prev[4] !== last_R_Last_Four_Negative_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four_Negative[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_Negative_expected_prev);
		$display ("     Real value = %b", R_Last_Four_Negative_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_Last_Four_Negative_exp[4] = R_Last_Four_Negative_expected_prev[4];
	end
	if (
		( R_Last_Four_Negative_expected_prev[5] !== 1'bx ) && ( R_Last_Four_Negative_prev[5] !== R_Last_Four_Negative_expected_prev[5] )
		&& ((R_Last_Four_Negative_expected_prev[5] !== last_R_Last_Four_Negative_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four_Negative[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_Negative_expected_prev);
		$display ("     Real value = %b", R_Last_Four_Negative_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_Last_Four_Negative_exp[5] = R_Last_Four_Negative_expected_prev[5];
	end
	if (
		( R_Last_Four_Negative_expected_prev[6] !== 1'bx ) && ( R_Last_Four_Negative_prev[6] !== R_Last_Four_Negative_expected_prev[6] )
		&& ((R_Last_Four_Negative_expected_prev[6] !== last_R_Last_Four_Negative_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_Last_Four_Negative[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_Last_Four_Negative_expected_prev);
		$display ("     Real value = %b", R_Last_Four_Negative_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_Last_Four_Negative_exp[6] = R_Last_Four_Negative_expected_prev[6];
	end
	if (
		( StudentID_Display_expected_prev[0] !== 1'bx ) && ( StudentID_Display_prev[0] !== StudentID_Display_expected_prev[0] )
		&& ((StudentID_Display_expected_prev[0] !== last_StudentID_Display_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StudentID_Display[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StudentID_Display_expected_prev);
		$display ("     Real value = %b", StudentID_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_StudentID_Display_exp[0] = StudentID_Display_expected_prev[0];
	end
	if (
		( StudentID_Display_expected_prev[1] !== 1'bx ) && ( StudentID_Display_prev[1] !== StudentID_Display_expected_prev[1] )
		&& ((StudentID_Display_expected_prev[1] !== last_StudentID_Display_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StudentID_Display[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StudentID_Display_expected_prev);
		$display ("     Real value = %b", StudentID_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_StudentID_Display_exp[1] = StudentID_Display_expected_prev[1];
	end
	if (
		( StudentID_Display_expected_prev[2] !== 1'bx ) && ( StudentID_Display_prev[2] !== StudentID_Display_expected_prev[2] )
		&& ((StudentID_Display_expected_prev[2] !== last_StudentID_Display_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StudentID_Display[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StudentID_Display_expected_prev);
		$display ("     Real value = %b", StudentID_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_StudentID_Display_exp[2] = StudentID_Display_expected_prev[2];
	end
	if (
		( StudentID_Display_expected_prev[3] !== 1'bx ) && ( StudentID_Display_prev[3] !== StudentID_Display_expected_prev[3] )
		&& ((StudentID_Display_expected_prev[3] !== last_StudentID_Display_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StudentID_Display[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StudentID_Display_expected_prev);
		$display ("     Real value = %b", StudentID_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_StudentID_Display_exp[3] = StudentID_Display_expected_prev[3];
	end
	if (
		( StudentID_Display_expected_prev[4] !== 1'bx ) && ( StudentID_Display_prev[4] !== StudentID_Display_expected_prev[4] )
		&& ((StudentID_Display_expected_prev[4] !== last_StudentID_Display_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StudentID_Display[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StudentID_Display_expected_prev);
		$display ("     Real value = %b", StudentID_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_StudentID_Display_exp[4] = StudentID_Display_expected_prev[4];
	end
	if (
		( StudentID_Display_expected_prev[5] !== 1'bx ) && ( StudentID_Display_prev[5] !== StudentID_Display_expected_prev[5] )
		&& ((StudentID_Display_expected_prev[5] !== last_StudentID_Display_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StudentID_Display[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StudentID_Display_expected_prev);
		$display ("     Real value = %b", StudentID_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_StudentID_Display_exp[5] = StudentID_Display_expected_prev[5];
	end
	if (
		( StudentID_Display_expected_prev[6] !== 1'bx ) && ( StudentID_Display_prev[6] !== StudentID_Display_expected_prev[6] )
		&& ((StudentID_Display_expected_prev[6] !== last_StudentID_Display_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StudentID_Display[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StudentID_Display_expected_prev);
		$display ("     Real value = %b", StudentID_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_StudentID_Display_exp[6] = StudentID_Display_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Circuit2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg A_Reset;
reg [7:0] B;
reg B_Reset;
reg Clock;
reg data_inFSM;
reg Enable_Decoder;
reg ResetFSM;
// wires                                               
wire [0:6] R_First_Four_Display;
wire [0:6] R_Last_Four_Display;
wire [0:6] R_Last_Four_Negative;
wire [0:6] StudentID_Display;

wire sampler;                             

// assign statements (if any)                          
Circuit2 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.A_Reset(A_Reset),
	.B(B),
	.B_Reset(B_Reset),
	.Clock(Clock),
	.data_inFSM(data_inFSM),
	.Enable_Decoder(Enable_Decoder),
	.R_First_Four_Display(R_First_Four_Display),
	.R_Last_Four_Display(R_Last_Four_Display),
	.R_Last_Four_Negative(R_Last_Four_Negative),
	.ResetFSM(ResetFSM),
	.StudentID_Display(StudentID_Display)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b1;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
end 

// A_Reset
initial
begin
	A_Reset = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 

// B_Reset
initial
begin
	B_Reset = 1'b0;
end 

// Clock
initial
begin
	Clock = 1'b1;
	Clock = #5000 1'b0;
	Clock = #5000 1'b1;
	Clock = #5000 1'b0;
	Clock = #5000 1'b1;
	Clock = #10000 1'b0;
	Clock = #10000 1'b1;
	Clock = #10000 1'b0;
	Clock = #10000 1'b1;
	Clock = #10000 1'b0;
	Clock = #10000 1'b1;
	Clock = #10000 1'b0;
	Clock = #10000 1'b1;
	Clock = #10000 1'b0;
	Clock = #10000 1'b1;
	Clock = #10000 1'b0;
	Clock = #10000 1'b1;
	Clock = #10000 1'b0;
	Clock = #10000 1'b1;
	Clock = #10000 1'b0;
	Clock = #10000 1'b1;
	Clock = #10000 1'b0;
	Clock = #10000 1'b1;
	Clock = #10000 1'b0;
	Clock = #10000 1'b1;
	Clock = #10000 1'b0;
	Clock = #10000 1'b1;
	Clock = #10000 1'b0;
	Clock = #10000 1'b1;
	Clock = #10000 1'b0;
	Clock = #10000 1'b1;
	Clock = #10000 1'b0;
	Clock = #10000 1'b1;
	Clock = #10000 1'b0;
	Clock = #10000 1'b1;
	Clock = #10000 1'b0;
	Clock = #10000 1'b1;
	Clock = #10000 1'b0;
	Clock = #10000 1'b1;
	Clock = #10000 1'b0;
	Clock = #10000 1'b1;
	Clock = #10000 1'b0;
	Clock = #10000 1'b1;
	Clock = #10000 1'b0;
	Clock = #10000 1'b1;
	Clock = #10000 1'b0;
end 

// data_inFSM
initial
begin
	data_inFSM = 1'b1;
end 

// Enable_Decoder
initial
begin
	Enable_Decoder = 1'b1;
end 

// ResetFSM
initial
begin
	ResetFSM = 1'b0;
end 

Circuit2_vlg_sample_tst tb_sample (
	.A(A),
	.A_Reset(A_Reset),
	.B(B),
	.B_Reset(B_Reset),
	.Clock(Clock),
	.data_inFSM(data_inFSM),
	.Enable_Decoder(Enable_Decoder),
	.ResetFSM(ResetFSM),
	.sampler_tx(sampler)
);

Circuit2_vlg_check_tst tb_out(
	.R_First_Four_Display(R_First_Four_Display),
	.R_Last_Four_Display(R_Last_Four_Display),
	.R_Last_Four_Negative(R_Last_Four_Negative),
	.StudentID_Display(StudentID_Display),
	.sampler_rx(sampler)
);
endmodule

